"""Update User model and add platform_id constraint

Revision ID: f6eacc8b57c9
Revises: 018
Create Date: 2025-06-09 23:56:21.872863

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f6eacc8b57c9'
down_revision: Union[str, None] = '018'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Check if constraints exist before dropping them
    conn = op.get_bind()
    
    # Check if user_limits table exists and has the constraint
    result = conn.execute(sa.text("""
        SELECT 1 FROM information_schema.table_constraints 
        WHERE constraint_name = 'user_limits_user_id_fkey' 
        AND table_name = 'user_limits'
    """)).fetchone()
    
    if result:
        op.drop_constraint('user_limits_user_id_fkey', 'user_limits', type_='foreignkey')
    
    # Check if devices table has the fk_devices_user_id constraint
    result = conn.execute(sa.text("""
        SELECT 1 FROM information_schema.table_constraints 
        WHERE constraint_name = 'fk_devices_user_id' 
        AND table_name = 'devices'
    """)).fetchone()
    
    if result:
        op.drop_constraint('fk_devices_user_id', 'devices', type_='foreignkey')

    # Check if user_limits table exists before dropping
    result = conn.execute(sa.text("""
        SELECT 1 FROM information_schema.tables 
        WHERE table_name = 'user_limits'
    """)).fetchone()
    
    if result:
        op.drop_table('user_limits')

    # Check if old users table exists before dropping
    result = conn.execute(sa.text("""
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'users' AND column_name = 'username'
    """)).fetchone()
    
    if result:
        # Old users table exists, drop it
        op.drop_table('users')

    # Perform all clients table alterations and index creations here FIRST
    op.alter_column('clients', 'name', existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column('clients', 'email', existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column('clients', 'created_at', existing_type=postgresql.TIMESTAMP(timezone=True), nullable=True, existing_server_default=sa.text('now()'))
    
    # Create indexes only if they don't exist
    try:
        op.create_index(op.f('ix_clients_email'), 'clients', ['email'], unique=True)
    except Exception:
        pass
    try:
        op.create_index(op.f('ix_clients_id'), 'clients', ['id'], unique=False)
    except Exception:
        pass
    try:
        op.create_index(op.f('ix_clients_name'), 'clients', ['name'], unique=False)
    except Exception:
        pass

    # Create the new 'users' table only if it doesn't exist with new schema
    result = conn.execute(sa.text("""
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'users' AND column_name = 'email'
    """)).fetchone()
    
    if not result:
        op.create_table('users',
            sa.Column('id', sa.Integer(), nullable=False, autoincrement=True),
            sa.Column('email', sa.String(), nullable=False),
            sa.Column('hashed_password', sa.String(), nullable=False),
            sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), nullable=False),
            sa.Column('role', sa.String(), server_default=sa.text("'user'::character varying"), nullable=False),
            sa.Column('platform_id', sa.Integer(), nullable=True),
            sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
            sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
            sa.PrimaryKeyConstraint('id')
        )
        
        try:
            op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
        except Exception:
            pass
        try:
            op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
        except Exception:
            pass
        try:
            op.create_foreign_key('fk_users_platform_id', 'users', 'clients', ['platform_id'], ['id'])
        except Exception:
            pass

    # Recreate user_limits table only if it doesn't exist
    result = conn.execute(sa.text("""
        SELECT 1 FROM information_schema.tables 
        WHERE table_name = 'user_limits'
    """)).fetchone()
    
    if not result:
        op.create_table('user_limits',
            sa.Column('id', sa.Integer(), nullable=False, autoincrement=True),
            sa.Column('user_id', sa.Integer(), nullable=False),
            sa.Column('max_devices', sa.Integer(), server_default=sa.text('0'), nullable=False),
            sa.Column('max_sms_messages', sa.Integer(), server_default=sa.text('0'), nullable=False),
            sa.Column('sms_messages_sent_current_period', sa.Integer(), server_default=sa.text('0'), nullable=False),
            sa.Column('sms_period_start_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
            sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_limits_user_id_fkey'),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('user_id', name='user_limits_user_id_key')
        )

    # Check if devices table has user_id column before adding
    result = conn.execute(sa.text("""
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'devices' AND column_name = 'user_id'
    """)).fetchone()
    
    if not result:
        op.add_column('devices', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
        try:
            op.create_foreign_key('fk_devices_user_id', 'devices', 'users', ['user_id'], ['id'])
        except Exception:
            pass

    # Now, address other autogenerated alterations for other tables
    op.alter_column('alerts', 'alert_type', existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column('alerts', 'message', existing_type=sa.TEXT(), type_=sa.String(), nullable=False)
    op.alter_column('devices', 'created_at', existing_type=postgresql.TIMESTAMP(timezone=True), nullable=True, existing_server_default=sa.text('now()'))
    
    try:
        op.create_index(op.f('ix_devices_id'), 'devices', ['id'], unique=False)
    except Exception:
        pass
        
    # Check if updated_at column exists before dropping
    result = conn.execute(sa.text("""
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'devices' AND column_name = 'updated_at'
    """)).fetchone()
    
    if result:
        op.drop_column('devices', 'updated_at')
    
    op.alter_column('logs', 'message', existing_type=sa.VARCHAR(), nullable=True, existing_server_default=sa.text("'Нет сообщения'::character varying"))
    op.alter_column('logs', 'level', existing_type=sa.VARCHAR(), nullable=True, existing_server_default=sa.text("'info'::character varying"))
    op.alter_column('logs', 'created_at', existing_type=postgresql.TIMESTAMP(timezone=True), nullable=True, existing_server_default=sa.text('now()'))
    
    try:
        op.create_index(op.f('ix_logs_id'), 'logs', ['id'], unique=False)
    except Exception:
        pass
    
    # Create superadmin user
    from passlib.context import CryptContext
    
    pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
    hashed_password = pwd_context.hash("05021983")
    
    # Check if superadmin user already exists
    result = conn.execute(sa.text("""
        SELECT 1 FROM users WHERE email = 'admin@admin.ru'
    """)).fetchone()
    
    if not result:
        conn.execute(sa.text("""
            INSERT INTO users (email, hashed_password, is_active, role, platform_id, created_at, updated_at)
            VALUES ('admin@admin.ru', :hashed_password, true, 'superadmin', NULL, NOW(), NOW())
        """), {"hashed_password": hashed_password})
        
        print("✓ Superadmin user created: admin@admin.ru")
    else:
        print("✓ Superadmin user already exists: admin@admin.ru")
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_logs_id'), table_name='logs')
    op.alter_column('logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('logs', 'level',
               existing_type=sa.VARCHAR(),
               nullable=False,
               existing_server_default=sa.text("'info'::character varying"))
    op.alter_column('logs', 'message',
               existing_type=sa.VARCHAR(),
               nullable=False,
               existing_server_default=sa.text("'Нет сообщения'::character varying"))
    op.add_column('devices', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('devices', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.create_foreign_key('fk_devices_user_id', 'devices', 'users', ['user_id'], ['id'])
    op.drop_index(op.f('ix_devices_id'), table_name='devices')
    op.alter_column('devices', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_clients_name'), table_name='clients')
    op.drop_index(op.f('ix_clients_id'), table_name='clients')
    op.drop_index(op.f('ix_clients_email'), table_name='clients')
    op.alter_column('clients', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('clients', 'email',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('clients', 'name',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('alerts', 'message',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('alerts', 'alert_type',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.create_table('user_limits',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('max_devices', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('max_sms_messages', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('sms_messages_sent_current_period', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('sms_period_start_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_limits_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_limits_pkey'),
    sa.UniqueConstraint('user_id', name='user_limits_user_id_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(), server_default=sa.text("'user'::character varying"), autoincrement=False, nullable=False),
    sa.Column('is_superuser', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('is_admin', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('platform_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['platform_id'], ['clients.id'], name='fk_users_platform_id'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('username', name='users_username_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    # ### end Alembic commands ###
