<<<<<<< HEAD
import logging
from typing import List, Dict, Any, Optional
from datetime import datetime
import httpx
from sqlalchemy.orm import Session

from app.models.notification import Notification
from app.models.user import User
from app.core.database import get_db
from app.core.config import settings

logger = logging.getLogger(__name__)

class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.notification_methods = {
            "email": self.send_email_notification,
            "webhook": self.send_webhook_notification,
            "database": self.save_database_notification,
            "telegram": self.send_telegram_notification
        }
    
    async def send_notification(self, message: str, recipients: List[str] = None, 
                              job_id: Optional[int] = None, 
                              notification_type: str = "database") -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            if not recipients:
                recipients = await self.get_default_recipients()
            
            # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏
            if notification_type in self.notification_methods:
                result = await self.notification_methods[notification_type](
                    message=message,
                    recipients=recipients,
                    job_id=job_id
                )
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                result = await self.save_database_notification(
                    message=message,
                    recipients=recipients,
                    job_id=job_id
                )
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notification_type}, –ø–æ–ª—É—á–∞—Ç–µ–ª–∏: {len(recipients)}")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return {
                "success": False,
                "error": str(e),
                "timestamp": datetime.utcnow().isoformat()
            }
    
    async def get_default_recipients(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            db = next(get_db())
            # –ü–æ–ª—É—á–∞–µ–º superadmin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            superadmins = db.query(User).filter(User.is_superadmin == True).all()
            recipients = [user.email for user in superadmins if user.email]
            db.close()
            return recipients
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    async def save_database_notification(self, message: str, recipients: List[str] = None,
                                       job_id: Optional[int] = None) -> Dict[str, Any]:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            db = next(get_db())
            
            notification = Notification(
                message=message,
                recipients=recipients or [],
                job_id=job_id,
                created_at=datetime.utcnow(),
                status="sent"
            )
            
            db.add(notification)
            db.commit()
            db.refresh(notification)
            db.close()
            
            return {
                "success": True,
                "notification_id": notification.id,
                "method": "database",
                "timestamp": datetime.utcnow().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ë–î: {e}")
            return {
                "success": False,
                "error": str(e),
                "method": "database",
                "timestamp": datetime.utcnow().isoformat()
            }
    
    async def send_email_notification(self, message: str, recipients: List[str] = None,
                                    job_id: Optional[int] = None) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ email"""
        try:
            if not recipients:
                return {
                    "success": False,
                    "error": "–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è email",
                    "method": "email",
                    "timestamp": datetime.utcnow().isoformat()
                }
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å email —Å–µ—Ä–≤–∏—Å–æ–º
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            logger.info(f"Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message[:50]}... –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º: {recipients}")
            
            return {
                "success": True,
                "method": "email",
                "recipients": recipients,
                "timestamp": datetime.utcnow().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")
            return {
                "success": False,
                "error": str(e),
                "method": "email",
                "timestamp": datetime.utcnow().isoformat()
            }
    
    async def send_webhook_notification(self, message: str, recipients: List[str] = None,
                                      job_id: Optional[int] = None) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ webhook"""
        try:
            webhook_url = getattr(settings, "NOTIFICATION_WEBHOOK_URL", None)
            if not webhook_url:
                return {
                    "success": False,
                    "error": "Webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                    "method": "webhook",
                    "timestamp": datetime.utcnow().isoformat()
                }
            
            webhook_data = {
                "message": message,
                "recipients": recipients or [],
                "job_id": job_id,
                "timestamp": datetime.utcnow().isoformat()
            }
            
            async with httpx.AsyncClient() as client:
                response = await client.post(webhook_url, json=webhook_data)
                response.raise_for_status()
            
            return {
                "success": True,
                "method": "webhook",
                "webhook_url": webhook_url,
                "status_code": response.status_code,
                "timestamp": datetime.utcnow().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ webhook: {e}")
            return {
                "success": False,
                "error": str(e),
                "method": "webhook",
                "timestamp": datetime.utcnow().isoformat()
            }
    
    async def send_telegram_notification(self, message: str, recipients: List[str] = None,
                                       job_id: Optional[int] = None) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
        try:
            bot_token = getattr(settings, "TELEGRAM_BOT_TOKEN", None)
            chat_id = getattr(settings, "TELEGRAM_CHAT_ID", None)
            
            if not bot_token or not chat_id:
                return {
                    "success": False,
                    "error": "Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω—ã",
                    "method": "telegram",
                    "timestamp": datetime.utcnow().isoformat()
                }
            
            telegram_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            telegram_data = {
                "chat_id": chat_id,
                "text": f"üîî Remosa Notification\n\n{message}",
                "parse_mode": "HTML"
            }
            
            async with httpx.AsyncClient() as client:
                response = await client.post(telegram_url, json=telegram_data)
                response.raise_for_status()
            
            return {
                "success": True,
                "method": "telegram",
                "chat_id": chat_id,
                "timestamp": datetime.utcnow().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return {
                "success": False,
                "error": str(e),
                "method": "telegram",
                "timestamp": datetime.utcnow().isoformat()
            }
    
    async def get_notifications(self, limit: int = 100, offset: int = 0) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            db = next(get_db())
            notifications = db.query(Notification).order_by(
                Notification.created_at.desc()
            ).offset(offset).limit(limit).all()
            
            result = []
            for notification in notifications:
                result.append({
                    "id": notification.id,
                    "message": notification.message,
                    "recipients": notification.recipients,
                    "job_id": notification.job_id,
                    "status": notification.status,
                    "created_at": notification.created_at.isoformat() if notification.created_at else None
                })
            
            db.close()
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return []
    
    async def mark_notification_as_read(self, notification_id: int) -> bool:
        """–û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"""
        try:
            db = next(get_db())
            notification = db.query(Notification).filter(Notification.id == notification_id).first()
            
            if notification:
                notification.status = "read"
                db.commit()
                db.close()
                return True
            
            db.close()
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
notification_service = NotificationService()
=======
from sqlalchemy.orm import Session
from sqlalchemy import desc, func
from typing import List, Optional
from app.models.notification import Notification
from app.schemas.notification import NotificationCreate, NotificationUpdate, NotificationList, UnreadCountResponse, NotificationMarkReadResponse
from app.models.user import User

class NotificationService:
    def __init__(self, db: Session):
        self.db = db

    def create_notification(self, notification_data: NotificationCreate) -> Notification:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        db_notification = Notification(**notification_data.dict())
        self.db.add(db_notification)
        self.db.commit()
        self.db.refresh(db_notification)
        return db_notification

    def get_notifications(
        self, 
        user_id: int, 
        limit: int = 10, 
        unread_only: bool = False
    ) -> NotificationList:
        """–ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = self.db.query(Notification).filter(Notification.user_id == user_id)
        
        if unread_only:
            query = query.filter(Notification.read_status == False)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notifications = query.order_by(desc(Notification.created_at)).limit(limit).all()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        total = self.db.query(Notification).filter(Notification.user_id == user_id).count()
        unread_count = self.db.query(Notification).filter(
            Notification.user_id == user_id,
            Notification.read_status == False
        ).count()
        
        return NotificationList(
            items=notifications,
            total=total,
            unread_count=unread_count
        )

    def get_unread_count(self, user_id: int) -> UnreadCountResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        unread_count = self.db.query(Notification).filter(
            Notification.user_id == user_id,
            Notification.read_status == False
        ).count()
        
        return UnreadCountResponse(unread_count=unread_count)

    def mark_notification_read(self, notification_id: int, user_id: int) -> bool:
        """–ü–æ–º–µ—Ç–∏—Ç—å –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"""
        notification = self.db.query(Notification).filter(
            Notification.id == notification_id,
            Notification.user_id == user_id
        ).first()
        
        if notification:
            notification.read_status = True
            self.db.commit()
            return True
        return False

    def mark_all_read(self, user_id: int) -> NotificationMarkReadResponse:
        """–ü–æ–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"""
        updated_count = self.db.query(Notification).filter(
            Notification.user_id == user_id,
            Notification.read_status == False
        ).update({Notification.read_status: True})
        
        self.db.commit()
        
        return NotificationMarkReadResponse(
            message="All notifications marked as read",
            updated_count=updated_count
        )

    def create_alert_notification(self, user_id: int, alert_title: str, alert_message: str) -> Notification:
        """–°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–ª–µ—Ä—Ç–∞"""
        notification_data = NotificationCreate(
            user_id=user_id,
            title=alert_title,
            message=alert_message,
            type="alert"
        )
        return self.create_notification(notification_data)

    def create_system_notification(self, user_id: int, title: str, message: str, notification_type: str = "info") -> Notification:
        """–°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        notification_data = NotificationCreate(
            user_id=user_id,
            title=title,
            message=message,
            type=notification_type
        )
        return self.create_notification(notification_data) 
>>>>>>> pre-prod
