import json
import logging
import re
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from pydantic import ValidationError
from datetime import datetime, timezone

from app.core.database import get_db
from app.schemas.grafana import GrafanaWebhookPayload
from app.models.log import Log
from app.models.device import Device
from app.schemas.log import LogCreate

router = APIRouter()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è INFO

@router.post("/grafana-webhook/")
async def grafana_webhook(payload: GrafanaWebhookPayload, db: Session = Depends(get_db)):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ Grafana. –ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {payload.model_dump_json(indent=2)}")
    for alert in payload.alerts:
        alert_name = alert.labels.alertname
        alert_status = alert.status
        player_name = alert.labels.player_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–µ–µ—Ä"
        player_id_str = alert.labels.player_id # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ ID
        platform = alert.labels.platform or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"
        summary = payload.commonAnnotations.summary
        starts_at = alert.startsAt
        ends_at = alert.endsAt

        # –û–±—Ä–µ–∑–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –¥–æ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥ –¥–ª—è starts_at –∏ ends_at
        def truncate_microseconds(dt_str: str) -> str:
            if not dt_str:
                return dt_str
            # Regex –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏ —Å–µ–∫—É–Ω–¥ –∏ –æ–±—Ä–µ–∑–∫–∏ –¥–æ 6 –∑–Ω–∞–∫–æ–≤
            match = re.match(r"^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})(\.\d{1,6})?(\d*)([+-]\d{2}:\d{2}|Z)$", dt_str)
            if match:
                base = match.group(1)
                microseconds = match.group(2) or ".000000"
                tz_info = match.group(4)
                return f"{base}{microseconds[:7]}{tz_info}" # –û–±—Ä–µ–∑–∞–µ–º –¥–æ .xxxxxx
            return dt_str # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª, –µ—Å–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É

        processed_starts_at = truncate_microseconds(starts_at)
        processed_ends_at = truncate_microseconds(ends_at)

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–∞: alert_name={alert_name}, status={alert_status}, player_id_str={player_id_str}")

        # –ü–æ–∏—Å–∫ device_id –ø–æ player_id
        device_id_for_log = None
        if player_id_str:
            try:
                player_id_int = int(player_id_str)
                device = db.query(Device).filter(Device.id == player_id_int).first()
                if device:
                    device_id_for_log = device.id
                    logger.info(f"–ù–∞–π–¥–µ–Ω device_id: {device_id_for_log} –¥–ª—è player_id: {player_id_str}")
                else:
                    logger.warning(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å player_id {player_id_str} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            except ValueError as e:
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π player_id: {player_id_str}. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ. –û—à–∏–±–∫–∞: {e}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ player_id {player_id_str}: {e}")
        else:
            logger.info("player_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∞–ª–µ—Ä—Ç–µ Grafana.")

        message = f"üö® –ê–õ–ï–†–¢: {alert_name} ({alert_status.upper()})\n\n–ü–ª–µ–µ—Ä: {player_name} ({player_id_str or 'N/A'})\n–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}\n–û–ø–∏—Å–∞–Ω–∏–µ: {summary}"
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ extra_data
        extra_data = {
            "alert_name": alert_name,
            "player_name": player_name,
            "player_id": player_id_str,
            "platform": platform,
            "summary": summary,
            "startsAt": processed_starts_at,
            "endsAt": processed_ends_at
        }

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ updated_at —Ç–æ–ª—å–∫–æ –¥–ª—èresolved –∞–ª–µ—Ä—Ç–æ–≤
        updated_at_for_log = None
        if alert_status.lower() == "resolved":
            try:
                updated_at_for_log = datetime.fromisoformat(processed_ends_at.replace("Z", "+00:00"))
            except ValueError:
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã endsAt: {processed_ends_at}")
                pass # –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É

        try:
            db_log = Log(
                message=message,
                level="alert",
                device_id=device_id_for_log,
                status=alert_status,
                extra_data=json.dumps(extra_data),
                created_at=datetime.fromisoformat(processed_starts_at.replace("Z", "+00:00")),
                updated_at=updated_at_for_log
            )
            db.add(db_log)
            db.commit()
            db.refresh(db_log)
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –ª–æ–≥ –∞–ª–µ—Ä—Ç–∞ —Å id: {db_log.id}")
        except ValidationError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Pydantic –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–≥–∞: {e.errors()}")
            raise HTTPException(status_code=422, detail=e.errors())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–∞ –≤ –ë–î: {e}", exc_info=True)
            raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–∞.")

    return {"status": "success", "message": "Webhook received and processed"} 