import json
import logging
import re
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from pydantic import ValidationError
from datetime import datetime, timezone

from app.core.database import get_db
from app.schemas.grafana import GrafanaWebhookPayload
from app.models.alert import Alert
from app.models.device import Device
from app.models.command_template import CommandTemplate
from app.schemas.alert import AlertCreate, AlertResponse
from app.services.sms_gateway import SMSGateway

router = APIRouter()
sms_gateway = SMSGateway() # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä SMSGateway

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)
# logging.basicConfig(level=logging.INFO) # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

@router.post("/grafana-webhook/")
async def grafana_webhook(payload: GrafanaWebhookPayload, db: Session = Depends(get_db)):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ Grafana. –ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {payload.model_dump_json(indent=2)}")

    device = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º device –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å UnboundLocalError

    for alert_data in payload.alerts:
        alert_name = alert_data.labels.alertname
        alert_status = alert_data.status
        player_name = alert_data.labels.player_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–µ–µ—Ä"
        player_id_str = alert_data.labels.player_id
        platform = alert_data.labels.platform or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"
        summary = payload.commonAnnotations.summary if payload.commonAnnotations and payload.commonAnnotations.summary else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
        starts_at_str = alert_data.startsAt
        ends_at_str = alert_data.endsAt
        severity = alert_data.labels.severity or "info"

        def truncate_microseconds(dt_str: str) -> str:
            if not dt_str:
                return dt_str
            match = re.match(r"^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})(\.\d{1,6})?(\d*)([+-]\d{2}:\d{2}|Z)$", dt_str)
            if match:
                base = match.group(1)
                microseconds = match.group(2) or ".000000"
                tz_info = match.group(4)
                return f"{base}{microseconds[:7]}{tz_info}"
            return dt_str

        processed_starts_at = truncate_microseconds(starts_at_str)
        processed_ends_at = truncate_microseconds(ends_at_str)
        logger.info(f"DEBUG_STARTSAT: Processed startsAt: {processed_starts_at}")

        device_id_for_alert = None
        device_phone_number = None
        if player_id_str:
            device = db.query(Device).filter(Device.grafana_uid == player_id_str).first()
            if device:
                device_id_for_alert = device.id
                device_phone_number = device.phone
                logger.info(f"–ù–∞–π–¥–µ–Ω device_id: {device_id_for_alert} –¥–ª—è grafana_uid: {player_id_str}")
            else:
                logger.warning(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å grafana_uid {player_id_str} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            logger.info("player_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∞–ª–µ—Ä—Ç–µ Grafana.")

        alert_message = f"üö® –ê–õ–ï–†–¢: {alert_name} ({alert_status.upper()})\n\n–ü–ª–µ–µ—Ä: {player_name} ({player_id_str or 'N/A'})\n–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}\n–û–ø–∏—Å–∞–Ω–∏–µ: {summary}"
        alert_data_dict = {
            "alert_name": alert_name,
            "player_name": player_name,
            "player_id": player_id_str,
            "platform": platform,
            "summary": summary,
            "startsAt": processed_starts_at,
            "endsAt": processed_ends_at,
            "severity": severity,
            "grafana_folder": alert_data.labels.grafana_folder,
            "instance": alert_data.labels.instance,
            "job": alert_data.labels.job,
            "alert_type": alert_data.labels.alert_type or "generic",
            "device_id": device_id_for_alert,
            "device_phone_number": device_phone_number,
            "fingerprint": alert_data.fingerprint,
            "status": alert_status,
            "message": alert_message
        }

        # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ resolved –∞–ª–µ—Ä—Ç–æ–≤: –Ω–∞–π—Ç–∏ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π firing –∞–ª–µ—Ä—Ç
        if alert_status.lower() == "resolved":
            existing_firing_alert = db.query(Alert).filter(
                Alert.alert_name == alert_name,
                Alert.status == "firing",
                Alert.device_id == device_id_for_alert,
                Alert.grafana_player_id == player_id_str
            ).order_by(Alert.created_at.desc()).first()

            if existing_firing_alert:
                logger.info(f"–ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∞–ª–µ—Ä—Ç (ID: {existing_firing_alert.id}, FINGERPRINT: {existing_firing_alert.external_id}) –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è. –û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç—É—Å –Ω–∞ 'resolved' –∏ endsAt.")
                existing_firing_alert.status = alert_status
                existing_firing_alert.endsAt = datetime.fromisoformat(processed_ends_at.replace("Z", "+00:00"))
                existing_firing_alert.updated_at = datetime.now(timezone.utc)
                db.add(existing_firing_alert)
                db.commit()
                db.refresh(existing_firing_alert)
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç —Å id: {existing_firing_alert.id} –≤ —Å—Ç–∞—Ç—É—Å 'resolved'.")
                continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–ª–µ—Ä—Ç—É –≤ –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
            else:
                logger.warning(f"–ü–æ–ª—É—á–µ–Ω RESOLVED –∞–ª–µ—Ä—Ç –¥–ª—è {alert_name} (player_id: {player_id_str}) –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ FIRING –∞–ª–µ—Ä—Ç–∞ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è. –ò–≥–Ω–æ—Ä–∏—Ä—É—é —ç—Ç–æ—Ç resolved –∞–ª–µ—Ä—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –ª–æ–≥–∏–∫–µ.")
                continue # –ù–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π 'resolved' –∞–ª–µ—Ä—Ç, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ firing

        # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ firing –∞–ª–µ—Ä—Ç–æ–≤ (–∏ –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–ª–µ—Ä—Ç)
        existing_active_firing_alert = None
        if alert_data.fingerprint: # –ï—Å–ª–∏ fingerprint –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∏ –Ω–∞–¥–µ–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            existing_active_firing_alert = db.query(Alert).filter(
                Alert.external_id == alert_data.fingerprint,
                Alert.status == "firing" # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
            ).first()

        # –ï—Å–ª–∏ fingerprint –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ –Ω–µ–º—É –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∞–ª–µ—Ä—Ç,
        # –∏—â–µ–º –ø–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–∫ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        if not existing_active_firing_alert:
            existing_active_firing_alert = db.query(Alert).filter(
                Alert.alert_name == alert_name,
                Alert.status == "firing",
                Alert.device_id == device_id_for_alert,
                Alert.grafana_player_id == player_id_str,
            ).order_by(Alert.created_at.desc()).first()

        if existing_active_firing_alert:
            logger.info(f"–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π FIRING –∞–ª–µ—Ä—Ç (ID: {existing_active_firing_alert.id}, FINGERPRINT: {existing_active_firing_alert.external_id}) –¥–ª—è {alert_name}. –û–±–Ω–æ–≤–ª—è—é timestamp –∏ severity.")
            existing_active_firing_alert.updated_at = datetime.now(timezone.utc)
            existing_active_firing_alert.timestamp = datetime.fromisoformat(processed_starts_at.replace("Z", "+00:00"))
            existing_active_firing_alert.severity = severity
            # –°—Ç–∞—Ç—É—Å –æ—Å—Ç–∞–µ—Ç—Å—è "firing"
            db.add(existing_active_firing_alert)
            db.commit()
            db.refresh(existing_active_firing_alert)
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π FIRING –∞–ª–µ—Ä—Ç —Å id: {existing_active_firing_alert.id}.")
            continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–ª–µ—Ä—Ç—É –≤ –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ

        # –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ—Å—é–¥–∞, —ç—Ç–æ –Ω–æ–≤—ã–π FIRING –∞–ª–µ—Ä—Ç (–∏–ª–∏ –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω –∫–∞–∫ –Ω–æ–≤—ã–π)
        try:
            alert_title = payload.title if payload.title else alert_data.labels.alertname
            if not alert_title:
                alert_title = "Generated Alert Title" # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ title –≤—Å–µ –µ—â–µ None
            logger.info(f"DEBUG_ALERT_TITLE: Title before DB add: {alert_title}") # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

            db_alert = Alert(
                device_id=device_id_for_alert,
                alert_name=alert_name,
                alert_type=alert_data.labels.alert_type or "generic",
                message=alert_message,
                data=alert_data_dict,
                severity=severity,
                status=alert_status,
                grafana_player_id=player_id_str,
                created_at=datetime.fromisoformat(processed_starts_at.replace("Z", "+00:00")),
                source="Grafana",
                title=alert_title,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π alert_title
                timestamp=datetime.fromisoformat(processed_starts_at.replace("Z", "+00:00")),
                external_id=alert_data.fingerprint,
                details=alert_data_dict,
            )
            db.add(db_alert)
            db.commit()
            db.refresh(db_alert)
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞–ª–µ—Ä—Ç —Å id: {db_alert.id}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ SMS-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∞–ª–µ—Ä—Ç firing, –∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ SMS –ø–æ —à–∞–±–ª–æ–Ω—É
            if device and device.phone and alert_status.lower() == "firing" and device.send_alert_sms:
                sms_command_text = ""
                if device.alert_sms_template_id:
                    command_template = db.query(CommandTemplate).filter(CommandTemplate.id == device.alert_sms_template_id).first()
                    if command_template:
                        try:
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω, –∏—Å–ø–æ–ª—å–∑—É—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç–∞
                            sms_command_text = command_template.template.format(
                                alert_name=alert_name,
                                alert_status=alert_status.upper(),
                                player_name=player_name,
                                player_id_str=player_id_str or 'N/A',
                                platform=platform,
                                summary=summary
                            )
                        except KeyError as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ SMS (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á {e}): {command_template.template}")
                            sms_command_text = f"–ê–õ–ï–†–¢! {alert_name}: {summary}" # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                    else:
                        logger.warning(f"–®–∞–±–ª–æ–Ω –∫–æ–º–∞–Ω–¥—ã —Å ID {device.alert_sms_template_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device.name}. –ò—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                        sms_command_text = f"–ê–õ–ï–†–¢! {alert_name}: {summary}"
                else:
                    logger.info(f"–î–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device.name} –≤–∫–ª—é—á–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ SMS, –Ω–æ —à–∞–±–ª–æ–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                    sms_command_text = f"–ê–õ–ï–†–¢! {alert_name}: {summary}"

                # –ï—Å–ª–∏ sms_command_text –≤—Å–µ –µ—â–µ –ø—É—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ device –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ phone_number –µ—Å—Ç—å), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if not sms_command_text:
                    sms_command_text = f"–ê–õ–ï–†–¢! {alert_name}: {summary}"

                try:
                    await sms_gateway.send_command(device.phone, sms_command_text)
                    db_alert.response = f"SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sms_command_text}"
                    db_alert.status = "firing_sms_sent" # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–ª–µ—Ä—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS
                    db.add(db_alert)
                    db.commit()
                    db.refresh(db_alert)
                    logger.info(f"SMS-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∞–ª–µ—Ä—Ç–∞ ID {db_alert.id}")
                except Exception as sms_e:
                    db_alert.response = f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: {str(sms_e)}"
                    db_alert.status = "firing_sms_failed" # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–ª–µ—Ä—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS
                    db.add(db_alert)
                    db.commit()
                    db.refresh(db_alert)
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –¥–ª—è –∞–ª–µ—Ä—Ç–∞ ID {db_alert.id}: {sms_e}", exc_info=True)

        except ValidationError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Pydantic –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞: {e.errors()}")
            raise HTTPException(status_code=422, detail=e.errors())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞ –≤ –ë–î: {e}", exc_info=True)
            raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞.")

    return {"status": "success", "message": "Webhook received and processed"}

@router.put("/alerts/{alert_id}/resolve")
async def resolve_alert_manually(alert_id: int, db: Session = Depends(get_db)):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ —Å ID: {alert_id}")
    db_alert = db.query(Alert).filter(Alert.id == alert_id, Alert.status == "firing").first()

    if not db_alert:
        raise HTTPException(status_code=404, detail="–ê–∫—Ç–∏–≤–Ω—ã–π –∞–ª–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —Ä–∞–∑—Ä–µ—à–µ–Ω")

    db_alert.status = "resolved"
    db_alert.updated_at = datetime.now(timezone.utc)
    
    try:
        db.add(db_alert)
        db.commit()
        db.refresh(db_alert)
        logger.info(f"–ê–ª–µ—Ä—Ç —Å ID {alert_id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å 'resolved'.")
        return {"status": "success", "message": f"–ê–ª–µ—Ä—Ç {alert_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞ —Å ID {alert_id}: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞.") 