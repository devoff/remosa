#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ (jobs)
–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
"""

import os
import sys
import psycopg2
from psycopg2.extras import RealDictCursor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DB_CONFIG = {
    'host': '192.168.1.178',
    'port': 5432,
    'database': 'remosa',
    'user': 'remosa',
    'password': '1234567890'
}

def connect_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        return conn
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def execute_query(conn, query, title):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print(f"\n{'='*50}")
    print(f"üîç {title}")
    print(f"{'='*50}")
    
    try:
        with conn.cursor(cursor_factory=RealDictCursor) as cur:
            cur.execute(query)
            results = cur.fetchall()
            
            if not results:
                print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç")
                return
            
            # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if results:
                headers = list(results[0].keys())
                print(" | ".join(headers))
                print("-" * (len(" | ".join(headers))))
                
                # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
                for row in results:
                    values = [str(row[col]) for col in headers]
                    print(" | ".join(values))
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏...")
    
    conn = connect_db()
    if not conn:
        return
    
    try:
        # 1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã jobs
        query1 = """
        SELECT column_name, data_type, is_nullable 
        FROM information_schema.columns 
        WHERE table_name = 'jobs' 
        ORDER BY ordinal_position;
        """
        execute_query(conn, query1, "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã jobs")
        
        # 2. –í—Å–µ –∑–∞–ø–∏—Å–∏ –≤ jobs
        query2 = """
        SELECT id, name, platform_id, conditions, actions, created_at, updated_at 
        FROM jobs 
        ORDER BY id;
        """
        execute_query(conn, query2, "–í—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ jobs")
        
        # 3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        query3 = "SELECT COUNT(*) as total_jobs FROM jobs;"
        execute_query(conn, query3, "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π")
        
        # 4. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ platform_id
        query4 = """
        SELECT platform_id, COUNT(*) as count 
        FROM jobs 
        GROUP BY platform_id 
        ORDER BY platform_id;
        """
        execute_query(conn, query4, "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –ø–æ platform_id")
        
        # 5. –ó–∞–ø–∏—Å–∏ —Å NULL –≤ conditions/actions
        query5 = """
        SELECT id, name, platform_id, conditions, actions 
        FROM jobs 
        WHERE conditions IS NULL OR actions IS NULL;
        """
        execute_query(conn, query5, "–ó–∞–¥–∞–Ω–∏—è —Å NULL –≤ conditions/actions")
        
        # 6. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id=2 –∏ –µ–≥–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        query6 = """
        SELECT u.id, u.email, u.role, up.platform_id
        FROM users u
        LEFT JOIN user_platforms up ON u.id = up.user_id
        WHERE u.id = 2
        ORDER BY u.id, up.platform_id;
        """
        execute_query(conn, query6, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id=2 –∏ –µ–≥–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã")
        
        # 7. –í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id=2
        query7 = """
        SELECT up.user_id, up.platform_id, p.name as platform_name
        FROM user_platforms up
        LEFT JOIN platforms p ON up.platform_id = p.id
        WHERE up.user_id = 2
        ORDER BY up.platform_id;
        """
        execute_query(conn, query7, "–í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id=2")
        
        # 8. –í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ
        query8 = """
        SELECT id, name, description 
        FROM platforms 
        ORDER BY id;
        """
        execute_query(conn, query8, "–í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
        
        # 9. –ó–∞–¥–∞–Ω–∏—è —Å platform_id = 2 –∏–ª–∏ 7
        query9 = """
        SELECT id, name, platform_id 
        FROM jobs 
        WHERE platform_id IN (2, 7)
        ORDER BY platform_id, id;
        """
        execute_query(conn, query9, "–ó–∞–¥–∞–Ω–∏—è —Å platform_id = 2 –∏–ª–∏ 7")
        
        # 10. –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        query10 = """
        SELECT id, name, platform_id, created_at 
        FROM jobs 
        ORDER BY created_at DESC 
        LIMIT 10;
        """
        execute_query(conn, query10, "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è")
        
        print(f"\n{'='*50}")
        print("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print(f"{'='*50}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    main() 